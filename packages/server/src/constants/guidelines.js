/**
 * 提示词指导原则常量
 * 包含PC端和移动端App的开发指导原则
 */

// PC 端开发指导原则
export const PC_GUIDELINES = `
1. 使用 Vue 3 Options API 和 <template> 语法创建单文件组件 (.vue)。
2. 使用 Scoped CSS 或 CSS Modules 进行样式隔离。必要时使用 :deep() 选择器。
3. 必须使用 Element Plus 组件库来实现所有核心 UI 元素，例如表单、表格、分页、按钮、下拉菜单、输入框等。
4. 图标：优先使用 Element Plus 内置图标或阿里图标库（iconfont.cn）。除非请求中特别指定，否则避免使用其他图标库。
5. 页面整体结构：通常遵循顶部为筛选/搜索区域，中部为数据表格，底部为分页控件的布局。
6. 筛选/搜索区域 (Filter/Search Section):
    - **布局需灵活**：能适应请求中指定的**不同数量和类型**的筛选字段（如输入框、下拉框、日期选择器等）。
    - **使用 Element Plus 布局组件**：利用 <el-form>、<el-row> 和 <el-col> 进行布局。目标是实现响应式排列（例如，宽屏时一行多列，窄屏时自动换行）。**默认情况下，建议每行放置 3 个筛选条件 (<el-col :span="8">)，行内间隔 (gutter) 为 10 或 16，除非请求中有特殊说明**。
    - **操作按钮**：查询、重置等按钮通常放置在筛选区域的末尾，并且**靠右对齐** (<el-form-item> 内加 style="margin-left: auto;")。
7. 数据表格 (Data Table):
    - **使用 Element Plus 表格组件**：即 <el-table>。
    - **列定义**：表格的列应根据请求中描述的数据结构或字段来生成。
    - **操作列**：如果请求中指定，应包含一个"操作"列，内含编辑、删除、查看详情等按钮或图标。使用合适的 Element Plus 图标。
    - **排序**：如果请求指定，应支持对某些列进行排序（列头显示排序图标）。
    - **可展开行**：如果请求指定，应支持使用 <el-table type="expand"> 来显示行的详细信息。
8. 分页 (Pagination):
    - **使用 Element Plus 分页组件**：即 <el-pagination>。
    - 包含每页显示数量选项、当前页码、总条目数和导航按钮。
9. 组件结构：遵循推荐的目录结构，例如 /components/{base,common,layouts}。
10. 代码完整性：必须生成完整的组件代码，包括 <template>, <script setup> (或 <script> Options API), 和 <style scoped> 部分。`

// App 移动端开发指导原则
export const APP_GUIDELINES = `
1. 使用 Vue 3 Options API 或 Composition API 创建单文件组件 (.vue)。
2. 使用 Scoped CSS 或 CSS Modules 进行样式隔离。必要时使用 :deep() 选择器。
3. 使用移动端 UI 框架，如 Vant、Cube UI 或其他指定的移动端组件库。
4. 图标：优先使用所选 UI 框架内置图标或阿里图标库（iconfont.cn）。
5. 移动端页面结构特点：
   - **布局简洁**：一般采用单列垂直流布局，避免复杂的多列结构。
   - **响应性强**：所有元素必须适应不同尺寸的移动设备屏幕。
   - **触摸友好**：按钮、输入控件等交互元素需足够大（至少 44×44px）以便于触摸操作。
   - **内容精简**：优先展示最重要信息，避免信息过载。
6. 常见布局结构：
   - **导航区域**：通常在顶部（NavBar）或底部（TabBar），提供主要导航功能。
   - **内容区域**：主体内容，可包含列表、卡片、表单等。
   - **操作区域**：浮动按钮、固定在底部的操作栏等。
7. 列表与数据展示：
   - **使用虚拟列表**：当需要展示大量数据时，优先考虑虚拟列表以提高性能。
   - **下拉刷新与上拉加载**：为列表视图实现下拉刷新和上拉加载更多功能。
   - **骨架屏**：实现骨架屏(Skeleton)加载状态以提升用户体验。
8. 表单与用户输入：
   - **输入优化**：针对不同输入类型使用合适的键盘（数字键盘、电话键盘等）。
   - **表单验证**：即时的输入验证和友好的错误提示。
   - **步骤简化**：如果表单较长，考虑分步骤填写或使用折叠面板。
9. 交互反馈：
   - **状态反馈**：加载中、成功、失败等状态需有明确视觉反馈（如轻提示、加载指示器）。
   - **手势支持**：根据需要实现滑动、拖拽等常见移动手势。
   - **过渡动画**：页面转换和元素状态变化时添加适当动画，增强用户体验。
10. 移动端性能优化：
    - **懒加载**：图片和组件的懒加载。
    - **资源体积**：最小化JS和CSS体积，优化图片大小。
    - **减少复杂计算**：避免在频繁触发的事件处理函数中进行复杂计算。
11. 适配不同设备：
    - **使用相对单位**：如rem、vw、vh而非固定像素值。
    - **安全区适配**：确保内容不被设备的物理特性（如刘海屏、圆角）遮挡。
12. 代码完整性：必须生成完整的组件代码，包括 <template>, <script setup> (或 <script> Options API), 和 <style scoped> 部分。`
